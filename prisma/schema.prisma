generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @unique @default(uuid())
  email         String    @unique
  password_hash String
  created_at    DateTime  @default(now())
  updated_at    DateTime?
  Profile       Profile[]
}

model Profile {
  id          String    @unique @default(uuid())
  actived_at  DateTime?
  username    String?   @unique
  user_id     String
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  description String?

  user                    User                      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Publication             Publication[]
  Comment                 Comment[]
  CommentReply            CommentReply[]
  PublicationRelevant     PublicationRelevant[]
  PublicationNotRelevant  PublicationNotRelevant[]
  CommentRelevant         CommentRelevant[]
  CommentNotRelevant      CommentNotRelevant[]
  CommentReplyRelevant    CommentReplyRelevant[]
  CommentNotReplyRelevant CommentNotReplyRelevant[]

  @@unique([user_id])
}

model Publication {
  id          String    @unique @default(uuid())
  profile_id  String
  title       String
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  profile                Profile                  @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  Comment                Comment[]
  PublicationRelevant    PublicationRelevant[]
  PublicationNotRelevant PublicationNotRelevant[]
}

model Comment {
  id             String    @unique @default(uuid())
  content        String
  created_at     DateTime  @default(now())
  updated_at     DateTime?
  profile_id     String
  publication_id String

  publication        Publication          @relation(fields: [publication_id], references: [id], onDelete: Cascade)
  profile            Profile              @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  CommentReply       CommentReply[]
  CommentRelevant    CommentRelevant[]
  CommentNotRelevant CommentNotRelevant[]
}

model CommentReply {
  id         String    @unique @default(uuid())
  content    String
  created_at DateTime  @default(now())
  updated_at DateTime?
  profile_id String
  comment_id String

  profile                 Profile                   @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  comment                 Comment                   @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  CommentReplyRelevant    CommentReplyRelevant[]
  CommentNotReplyRelevant CommentNotReplyRelevant[]
}

model PublicationRelevant {
  id             String @unique @default(uuid())
  profile_id     String
  publication_id String

  profile     Profile     @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  publication Publication @relation(fields: [publication_id], references: [id], onDelete: Cascade)

  @@unique([profile_id, publication_id])
}

model PublicationNotRelevant {
  id             String @unique @default(uuid())
  profile_id     String
  publication_id String

  profile     Profile     @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  publication Publication @relation(fields: [publication_id], references: [id], onDelete: Cascade)

  @@unique([profile_id, publication_id])
}

model CommentRelevant {
  id         String @unique @default(uuid())
  comment_id String
  profile_id String

  comment Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@unique([profile_id, comment_id])
}

model CommentNotRelevant {
  id         String @unique @default(uuid())
  comment_id String
  profile_id String

  comment Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@unique([profile_id, comment_id])
}

model CommentReplyRelevant {
  id               String @unique @default(uuid())
  comment_reply_id String
  profile_id       String

  commentReply CommentReply @relation(fields: [comment_reply_id], references: [id], onDelete: Cascade)
  profile      Profile      @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@unique([profile_id, comment_reply_id])
}

model CommentNotReplyRelevant {
  id               String @unique @default(uuid())
  comment_reply_id String
  profile_id       String

  commentReply CommentReply @relation(fields: [comment_reply_id], references: [id], onDelete: Cascade)
  profile      Profile      @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@unique([profile_id, comment_reply_id])
}
